/**
 * Created by DNS on 07.02.14.
 */
var crypto = require('crypto');

function Variable() {
}
Variable.type = function (variable) {
  return {}.toString.call(variable).slice(8, -1).toLowerCase();
};
Variable.empty = function (variable) {
  switch (this.type(variable)) {
    case 'null':
      return true;
      break;
    case 'undefined':
      return true;
      break;
    case 'boolean':
      return false;
      break;
    case 'number':
      return (isNaN(variable) || variable === Infinity || variable === -Infinity);
      break;
    case 'string':
      return variable.length === 0;
      break;
    case 'array':
      return variable.length === 0;
      break;
    case 'object':
      return Object.getOwnPropertyNames(variable).length === 0;
      break;
    default :
      return variable.toString().length === 0;
  }
};

Variable.objectEqual = function (a, b, setup) {
  setup = setup || {};
  var strict = setup.strict || false;
  var type_a = this.type(a);
  var type_b = this.type(b);
  if (type_a === 'function' || type_b === 'function') {
    return true;
  }
  if (!strict && ['boolean', 'number', 'string'].indexOf(type_a) !== -1 && ['boolean', 'number', 'string'].indexOf(type_b) !== -1) {
    return this.equal(a, b, strict);
  }
  if (type_a === type_b) {
    if (type_a === 'array') {
      if (a.length !== b.length) {
        return false;
      }
      for (var i in a) {
        if (!this.objectEqual(a[i], b[i], {strict: strict})) return false;
      }
    } else if (type_a === 'object') {
      var object_for_enumeration = (Object.keys(a).length >= Object.keys(b).length) ? a : b;
      for (var i in object_for_enumeration) {
        if (!this.objectEqual(a[i], b[i], {strict: strict})) return false;
      }
    }
    return true;
  } else {
    return false;
  }
};

Variable.equal = function (a, b, strict) {
  var result;
  if (strict) {
    result = (a === b);
  } else {
    result = (a == b);
  }
  return result;
};

Variable.getRandom = function (min, max) {
  return Math.random() * (max - min) + min;
};

Variable.stringToArray = function (string, separator) {
  separator = separator || ',';
  if (Variable.type(string) === 'string' && !Variable.empty(string)) {
    var return_array = string.split(separator);
    for (var key in return_array) {
      return_array[key] = return_array[key].trim();
    }
    return return_array;
  } else {
    return string;
  }
};

Variable.uniqueArrayElements = function (array, options) {
  if (Variable.type(array) === 'array') {
    options = options || {};
    options.strict = options.strict || false;
    var return_array = array.slice();
    return_array.sort();
    for (var i = 0; i < return_array.length; i++) {
      if (Variable.equal(return_array[i], return_array[i + 1], options.strict)) {
        return_array.splice(i, 1);
      }
    }
    return return_array;
  } else {
    return false;
  }
};

//Возвращает строку, в которой произведена замена подстрок из object_replace.
//options = {
//    i: true, //регистр неважен
//    m: true, //многострочный поиск
//    g: true //глобальный поиск (по умолчанию)
//};
Variable.replaceAll = function (string, object_replace, options) {
  if (Variable.type(string) === 'string' && Variable.type(object_replace) === 'object') {
    options = options || {};
    options.g = options.g || true;
    var option_reg = '';
    option_reg += (options.g) ? 'g' : '';
    option_reg += (options.m) ? 'm:' : '';
    option_reg += (options.i) ? 'i:' : '';
    var array_replace = Object.keys(object_replace);
    var new_string_replace = '';
    array_replace.forEach(function (value, key, array) {
      new_string_replace = '';
      for (var i in value) {
        if (['.', '^', '$', '|', '(', ')', '*', '+', '?'].indexOf(value[i]) !== -1) {
          new_string_replace += '\\' + value[i];
        } else {
          new_string_replace += value[i];
        }
      }
      array[key] = new_string_replace;
    });
    var reg_exp = new RegExp('(' + array_replace.join('|') + ')', option_reg);
    string = string.replace(reg_exp, function (key_object_replace) {
      return object_replace[key_object_replace];
    });
    return string;
  } else {
    return false;
  }
};

Variable.getElementByPath = function (path, object) {
  path = this.stringToArray(path, '.');
  var target = object;

  while (path.length > 0) {
    key = path.shift();
    if (target && target.hasOwnProperty(key)) {
      target = target[key];
      continue;
    }
    return undefined;
  }

  return target;
};

Variable.getSHA1 = function (string) {
  string = string || false;
  var sha_sum = crypto.createHash('sha1');
  if (string) {
    sha_sum.update(string);
  } else {
    var process_time = process.hrtime();
    sha_sum.update('' + Math.random() + process_time[0] * 1e9 + process_time[1]);
  }
  return sha_sum.digest('hex');
};

Variable.getMD5 = function (string) {
  string = string || false;
  var sum = crypto.createHash('md5');
  if (string) {
    sum.update(string);
  } else {
    var process_time = process.hrtime();
    sum.update('' + Math.random() + process_time[0] * 1e9 + process_time[1]);
  }
  return sum.digest('hex');
};

Variable.getFirstKey = function (object) {
  var result = false;
  if (typeof object === 'object') {
    for (var i in object) {
      if (object.hasOwnProperty(i)) {
        result = i;
        break;
      }
    }
  }
  return result;
};

Variable.getFirstValue = function (object) {
  var result = false;
  if (typeof object === 'object') {
    for (var i in object) {
      if (object.hasOwnProperty(i)) {
        result = object[i];
        break;
      }
    }
  }
  return result;
};

Variable.objectSize = function (obj) {
  var size = 0, key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) size++;
  }
  return size;
};

Variable.pregQuote = function (str, delimiter) {
  return (str + '').replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\' + (delimiter || '') + '-]', 'g'), '\\$&');
};

Variable.getNumbersFromString = function (string) {
  return string.replace(new RegExp('\\D', 'g'), '');
};

Variable.clone = function (obj) {
  // Handle the 3 simple types, and null or undefined
  if (null == obj || "object" != typeof obj) return obj;

  // Handle Date
  if (obj instanceof Date) {
    var copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    var copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = Variable.clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    var copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty(attr)) copy[attr] = Variable.clone(obj[attr]);
    }
    return copy;
  }

  throw new Error("Unable to copy obj! Its type isn't supported.");
};

Variable.isInt = function (variable) {
  return variable === parseInt(variable, 10);
};

Variable.getFuncName = function(func){
  return func.toString().match(/function\s([^\(]*)/)[1];
};

module.exports = Variable;