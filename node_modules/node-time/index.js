/**
 * Created by DNS on 03.03.14.
 *
 * time_correction - разница между текущим времененм и UTC. Москва: +4, Екатеринбург: +6
 */

var Variable=require('variable'),
  config = require('./config/config.json');

function Time(time, time_correction, format){
    time=time||new Date;
    time_correction=time_correction||0;
    format = format || config.time_format;
    this.date=this.convertTimeToDateObject(time, format);
    this.setTimeCorrection(time_correction);
    return this;
}

Time.prototype.reset=function(time, time_correction, format){
    time=time||new Date;
    time_correction=time_correction||0;
    format = format || config.time_format;
    return Time.apply(this, arguments);
};

Time.prototype.setTimeCorrection=function(time_correction){
    this.time_correction=time_correction*Time.hour;
    this.date=new Date(this.date.getTime()-this.time_correction);
    return this;
};

Time.prototype.convertTimeToDateObject=function(time, format){
    format=format||false;
    switch(Variable.type(time)){
        case 'date':
            return time;
            break;
        case 'number':
            time= (time<5000000000) ? time*1000 : time;
            return new Date(time);
            break;
        case 'string':
            return this.stringToTime(time, format);
            break;
    }
};

Time.prototype.stringToTime=function(string, format){
    format = format || config.time_format || false;
    if(format){
        var format_pattern=Variable.replaceAll(format, {
            '.': '\\.',
            '|': '\\|',
            '(': '\\(',
            ')': '\\)',
            '*': '\\*',
            '+': '\\+'
        });
        format_pattern=Variable.replaceAll(format_pattern, Time.pattern_replace);
        var matches=new RegExp(format_pattern, 'g').exec(string);
        if(matches){
            var array_components=format.match(new RegExp('('+Object.keys(Time.pattern_replace).join('|')+')', 'g'));
            var time={};
            var date=new Date();
            array_components.forEach(function(component, key){
                time[component]=matches[key+1];
            });
            time['month']= (time['month']!=undefined) ? time['month']-1 : 0;
//            return new Date(time['year']||0, time['month'], time['day']||0, time['hour']||0, time['minute']||0, time['second']||0, time['millisecond']||0);
            date.setUTCFullYear(time['year']||0, time['month'], time['day']||0);
            date.setUTCHours(time['hour']||0, time['minute']||0, time['second']||0, time['millisecond']||0);
            return date;
        }
    }
    return false;
};

Time.prototype.toString=function(time_correction, format){
    time_correction=time_correction*Time.hour||this.time_correction;
    format = format || config.time_format;
    var date=this.getDateWithTimeCorrection(this.date, time_correction);
    var object_replace={
        day: date.getUTCDate(),
        month: date.getUTCMonth()+1,
        year: date.getUTCFullYear(),
        hour: date.getUTCHours(),
        minute: date.getUTCMinutes(),
        second: date.getUTCSeconds(),
        millisecond: date.getUTCMilliseconds()
    };
    for(var i in object_replace){
        if(object_replace[i]<10) object_replace[i]='0'+object_replace[i];
    }
    if(object_replace.millisecond<100) object_replace.millisecond='0'+object_replace.millisecond;
    return Variable.replaceAll(format, object_replace);
};

Time.prototype.getDay=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCDate();
};

Time.prototype.getMonth=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCMonth()+1;
};

Time.prototype.getYear=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCFullYear();
};

Time.prototype.getHours=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCHours();
};

Time.prototype.getMinutes=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCMinutes();
};

Time.prototype.getSeconds=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCSeconds();
};

Time.prototype.getMilliseconds=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getUTCMilliseconds();
};

Time.prototype.getDateWithTimeCorrection=function(date, time_correction){
    if(time_correction===0){
        return date;
    }else{
        return new Date(date.getTime()+time_correction);
    }
};

Time.prototype.getTime=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getTime()/1000;
};

Time.prototype.getWeekDay=function(output_time_correction){
    output_time_correction=this.getOutputTimeCorrection(output_time_correction);
    return this.getDateWithTimeCorrection(this.date, output_time_correction).getDay();
};

Time.prototype.getOutputTimeCorrection= function(output_time_correction){
    output_time_correction=output_time_correction||0;
    return output_time_correction*Time.hour;
};

Time.pattern_replace={
    'day': '(\\d{1,2})',
    'month': '(\\d{1,2})',
    'year': '(\\d{2,4})',
    'hour': '(\\d{1,2})',
    'minute': '(\\d{1,2})',
    'second': '(\\d{1,2})',
    'millisecond': '(\\d{3})'
};
Time.weekdays=['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
Time.weekdays_shortcut=['вс','пн', 'вт', 'ср','чт', 'пт', 'сб'];
Time.months=['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'];
Time.months_when=['января', 'февраля', 'марта', 'апреля', 'майя', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];
Time.minute=60000;
Time.hour=3600000;
Time.day=86400000;
Time.week=604800000;

module.exports=Time;